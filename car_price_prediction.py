# -*- coding: utf-8 -*-
"""Car_Price_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hFnF4a9SkrisNPNVh_P0nkqH1onZc0Ya
"""

# Load the Dependence
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
df = pd.read_csv('/content/car data.csv')

# print the first 5 rows
display(df.head())

# shape of the dataset
print(df.shape)

# check the missing value in the dataset
print(df.isnull().sum())

print(df['Selling_type'].value_counts())

# statistical value of dataset
display(df.describe())

print(df.select_dtypes(include='object').columns)

# Initialize and fit LabelEncoders for categorical features
le_car_name = LabelEncoder()
df['Car_Name'] = le_car_name.fit_transform(df['Car_Name'])

le_fuel_type = LabelEncoder()
df['Fuel_Type'] = le_fuel_type.fit_transform(df['Fuel_Type'])

le_selling_type = LabelEncoder()
df['Selling_type'] = le_selling_type.fit_transform(df['Selling_type'])

le_transmission = LabelEncoder()
df['Transmission'] = le_transmission.fit_transform(df['Transmission'])

if "Year" in df.columns:
    df["Car_Age"] = 2025 - df["Year"]
    df.drop("Year", axis=1, inplace=True)

"""Define features (X) and target (y)"""

target_column = "Selling_Price"

X = df.drop([target_column], axis=1) # X contains all features except Selling_Price
y = df[target_column]

print(X)

print(y)

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X) # Fit scaler on the correctly defined X

print(X_scaled)

# train-test-split the data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Build and train the regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate

y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

train_mse = mean_squared_error(y_train, y_train_pred)
test_mse = mean_squared_error(y_test, y_test_pred)

train_r2 = r2_score(y_train, y_train_pred)
test_r2 = r2_score(y_test, y_test_pred)

print(f"\nTrain RMSE: {np.sqrt(train_mse):.2f}")
print(f"Train R2 Score: {train_r2:.2f}")

print(f"Test RMSE: {np.sqrt(test_mse):.2f}")
print(f"Test R2 Score: {test_r2:.2f}")

#  Plot predicted vs. actual

plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_test_pred)
plt.xlabel("Actual Selling Price")
plt.ylabel("Predicted Selling Price")
plt.title("Actual vs Predicted Car Prices")
plt.grid()
plt.show()

# predict on new data

# Original input data: ['sx4', 2013, 4.75, 9.54, 43000, 'Diesel', 'Dealer', 'Manual']
# Features in X (used for scaler fitting): 'Car_Name', 'Present_Price', 'Driven_kms', 'Fuel_Type', 'Selling_type', 'Transmission', 'Owner', 'Car_Age'

# Encode the categorical features from the input data using the fitted encoders
encoded_car_name = le_car_name.transform(['sx4'])[0]
encoded_fuel_type = le_fuel_type.transform(['Diesel'])[0]
encoded_selling_type = le_selling_type.transform(['Dealer'])[0]
encoded_transmission = le_transmission.transform(['Manual'])[0]

# Calculate Car_Age
car_age = 2025 - 2013

# Create a dictionary with the new data, using feature names as keys
new_data_dict = {
    'Car_Name': [encoded_car_name],
    'Present_Price': [9.54],
    'Driven_kms': [43000],
    'Fuel_Type': [encoded_fuel_type],
    'Selling_type': [encoded_selling_type],
    'Transmission': [encoded_transmission],
    'Owner': [0], # Assuming Owner is 0 based on the original input data structure
    'Car_Age': [car_age]
}

# Create a DataFrame from the dictionary
new_data_df = pd.DataFrame(new_data_dict)

# Ensure the columns are in the same order as X used for scaler fitting
feature_names = X.columns
new_data_df = new_data_df[feature_names]

# Standardize the new data using the fitted scaler
new_data_scaled = scaler.transform(new_data_df)

# Make the prediction
predicted_price = model.predict(new_data_scaled)

print(f"\nPredicted price for new data: {predicted_price[0]:.2f}")

